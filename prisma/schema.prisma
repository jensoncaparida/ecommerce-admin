// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id String @id @default(uuid())
  name String
  userId String
  banners Banner[]
  categories Category[]
  brands Brand[]
  sizes Size[]
  colors Color[]
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id String @id @default(uuid())
  storeId String
  store Store @relation(fields: [storeId], references: [id])
  label String
  imageUrl String
  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id String @id @default(uuid())
  storeId String
  store Store @relation(fields: [storeId], references: [id])
  bannerId String
  banner Banner? @relation(fields: [bannerId], references: [id])
  name String
  isParent Boolean @default(false)
  parentId String
  parent Category? @relation("ParentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Category[] @relation("ParentChildren")
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, parentId])
  @@index([storeId])
  @@index([bannerId])
  @@index([parentId])
}

model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation(fields: [storeId], references: [id])
  categoryId String
  category Category @relation(fields: [categoryId], references: [id])
  name String
  description String @db.Text
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  brandId String
  brand Brand @relation(fields: [brandId], references: [id])
  sizeId String  
  size Size @relation(fields: [sizeId], references: [id])
  colorId String
  color Color @relation(fields: [colorId], references: [id])
  images Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([brandId])
  @@index([sizeId])
  @@index([colorId])
}

model Brand {
  id String @id @default(uuid())
  storeId String
  store Store @relation(fields: [storeId], references: [id])
  name String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, storeId])
  @@index([storeId])
}

model Size {
  id String @id @default(uuid())
  storeId String
  store Store @relation(fields: [storeId], references: [id])
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, value])
  @@index([storeId])
}

model Color {
  id String @id @default(uuid())
  storeId String
  store Store @relation(fields: [storeId], references: [id])
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, value])
  @@index([storeId])
}

model Image {
  id          String   @id @default(uuid())
  productId   String   
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}